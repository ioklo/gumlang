%{
    open Syntax
%}

%start start
%token EQUALS COMMA SEMICOLON COLON LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET
%token PLUSPLUS MINUSMINUS EQUALEQUAL EXCLEQUAL LTEQUAL GTEQUAL AMPERAMPER BARBAR QUESTIONQUESTION 
%token PLUS MINUS STAR SLASH EXCL AMPER BAR QUESTION DOT LT GT VAR

%token CLASS STRUCT INTERFACE PUBLIC PROTECTED NEW VIRTUAL OVERRIDE BASE OPERATOR STATIC IS NULLTOKEN TRUE FALSE OUT PARAMS
%token YIELD RETURN BREAK CONTINUE WHERE
%token IF ELSE DO WHILE FOR FOREACH IN ASYNC LAUNCH AWAIT

%token <System.Int32> DIGITS
%token <System.String> ID

%token FIRST_ID_CHAR REST_ID_CHAR
%token <System.String> STRING

%token EOF

// Precedence
%right EQUALS 
%right QUESTIONQUESTION TERNARY

%type <FileUnit> start

%%
start: fileUnit { $1 }

// 첫 ID는 where이다, 두번째 ID는 TypeVar이다
typeParamConstraint
    : WHERE ID COLON typeIDsRev { { TypeParamConstraint.typeVar = $2; constraintTypes = $4 } }

tupleElemTypeID
    : typeID { { TupleTypeElem.elemType = $1; name = None } }
    | typeID ID { { TupleTypeElem.elemType = $1; name = Some $2 } }

tupleElemTypesRev
    : tupleElemTypeID { [$1] }
    | tupleElemTypesRev COMMA tupleElemTypeID { $3::$1 }

tupleElemTypes2Rev
    : tupleElemTypesRev COMMA tupleElemTypeID { $3::$1 }

unionTypesRev
    : typeID { [$1] }
    | unionTypesRev BAR typeID { $3::$1 }

unionTypes2Rev
    : unionTypesRev BAR typeID { $3::$1 }

typeIDsRev
    : typeID { [$1] }
    | typeIDsRev COMMA typeID { $3::$1 }

optionalTypeArgs
    : { [] }
    | LT typeIDsRev GT { List.rev($2) }

optionalQuestion
    : { false }
    | QUESTION { true }

// TODO: >> 조심
typeID
    : ID optionalTypeArgs optionalQuestion     
    {  
        let literalTypeID = { LiteralTypeID.name = $1 }
        let typeInstID: TypeID = 
            if $2 <> [] then 
                TypeInst { typeID = literalTypeID; typeArgs = $2 }
            else
                Literal literalTypeID
        let nullableTypeID = 
            if $3 then Nullable { typeID = typeInstID }
            else typeInstID

        nullableTypeID
    }
    | LPAREN RPAREN { Tuple { elems = [] } } 
    | LPAREN tupleElemTypes2Rev RPAREN { Tuple { elems = List.rev($2) } } 
    | LPAREN unionTypes2Rev RPAREN { Union { elems = List.rev($2) } }

varOrtypeID
    : VAR { None }
    | typeID { Some $1 }

typeParamConstraintsRev
    : typeParamConstraint { [$1] }
    | typeParamConstraintsRev typeParamConstraint { $2::$1 }

optionalTypeParamConstraints
    : { [] }
    | typeParamConstraintsRev { List.rev($1) }

typeParam
    : optionalParams ID { { TypeParam.bParams = $1; name = $2 }  }

typeParamsRev
    : typeParam { [$1] }
    | typeParamsRev COMMA typeParam { $3::$1 }

typeParams
    : typeParamsRev { List.rev($1) }

optionalTypeParams
    : { [] }
    | LT typeParamsRev GT { List.rev($2) }

optionalTypeParamsAndConstraints
    : { ([], []) }
    | LT typeParams GT optionalTypeParamConstraints { ($2, $4) }

optionalBaseTypeDecl
    : { [] }
    | COLON typeIDsRev { List.rev($2) }

interfaceMemberDecl
    : interfaceFuncDecl { FuncDecl $1 }

optionalStatic
    : { false }
    | STATIC { true }

optionalAsync
    : { false }
    | ASYNC { true }

optionalParams
    : { false }
    | PARAMS { true }

optionalOut
    : { false }
    | OUT { true }

optionalAmper
    : { false }
    | AMPER { true }

funcParam
    : optionalParams optionalOut typeID optionalAmper ID { { FuncParam.bParams = $1; bOut = $2; typeID = $3; bRef = $4; name = $5 } }

funcParamsRev
    : funcParam { [$1] }
    | funcParamsRev funcParam { $2::$1 }

optionalFuncParams
    : { [] }
    | funcParamsRev { List.rev($1) }

interfaceFuncDecl
    : optionalStatic optionalAsync typeID ID LPAREN optionalFuncParams RPAREN SEMICOLON 
    { 
        {
            InterfaceMemberFuncDecl.bStatic = $1
            bAsync = $2
            retType = $3
            name = $4
            funcParams = $6
        }
    } 

interfaceMemberDeclsRev
    : interfaceMemberDecl { [$1] }
    | interfaceMemberDeclsRev interfaceMemberDecl { $2::$1 }

optionalInterfaceMemberDecls
    : { [] }
    | interfaceMemberDeclsRev { List.rev($1) }

interfaceDecl: 
    | INTERFACE ID optionalTypeParamsAndConstraints optionalBaseTypeDecl LBRACE optionalInterfaceMemberDecls RBRACE 
    { 
        let (typeParams, typeParamConstraints) = $3

        { 
            InterfaceDecl.name = $2
            typeParams = typeParams
            typeParamConstraints = typeParamConstraints
            baseTypes = $4
            memberDecls = $6
        }
    }

stmtsRev
    : stmt { [$1] }   
    | stmtsRev SEMICOLON stmt { $3::$1 }

optionalStmts
    : { [] }
    | stmtsRev { List.rev($1) } 

blankStmt: SEMICOLON { }
blockStmt: LBRACE optionalStmts RBRACE { { stmts = $2 } }
varDeclStmt: varDecl SEMICOLON { $1 }

varDeclElem
    : ID { { VarDeclElem.name = $1; exp = None } }
    | ID EQUALS exp { { name = $1; exp = Some $3 } }

varDeclElemsRev
    : varDeclElem { [$1] }
    | varDeclElemsRev COMMA varDeclElem { $3::$1 }

varDecl
    : varOrtypeID varDeclElemsRev { { varType = $1; varDeclElems = List.rev($2) } }

returnStmt
    : RETURN SEMICOLON { { ReturnStmt.exp = None } }
    | RETURN exp SEMICOLON { { exp = Some $2 } }

continueStmt: CONTINUE SEMICOLON { }

breakStmt: BREAK SEMICOLON { }

ifStmt
    : IF LPAREN exp RPAREN stmt                     { { cond = $3; trueBody = $5; falseBody = None } }
    | IF LPAREN exp RPAREN stmt ELSE stmt           { { cond = $3; trueBody = $5; falseBody = Some $7 } }

typeGuardStmt
    : IF LPAREN idExp IS typeID RPAREN stmt           { { idExp = $3; typeGuardType = $5; trueBody = $7; falseBody = None } } 
    | IF LPAREN idExp IS typeID RPAREN stmt ELSE stmt { { idExp = $3; typeGuardType = $5; trueBody = $7; falseBody = Some $9 } }

whileStmt
    : WHILE LPAREN exp RPAREN stmt { { WhileStmt.cond = $3; body = $5 } }

doWhileStmt
    : DO stmt WHILE LPAREN exp RPAREN { { DoWhileStmt.body = $2; cond = $5 } }

optionalForInit
    :         { None }
    | varDecl { Some (Stmt.VarDecl $1) }
    | exp     { Some (Stmt.Exp { exp = $1 } ) }

optionalExp
    :     { None }
    | exp { Some $1 }

forStmt
    : FOR LPAREN optionalForInit SEMICOLON optionalExp SEMICOLON optionalExp RPAREN stmt
    { { initializer = $3; cond = $5; condExp = $7; body= $9 } }

foreachStmt
    : FOREACH optionalTypeParams LPAREN varOrtypeID ID IN exp RPAREN stmt
    { { typeParams = $2; elemType = $4; elemName = $5; enumExp = $7; body = $9 } }

expStmt
    : exp SEMICOLON { { ExpStmt.exp = $1 } }

yieldBreakStmt: YIELD BREAK SEMICOLON { }
yieldReturnStmt: YIELD RETURN exp SEMICOLON { { YieldReturnStmt.exp = $3 } }

stmt
    : blankStmt         { Stmt.Blank }
    | blockStmt         { Stmt.Block $1 }
    | varDeclStmt       { Stmt.VarDecl $1 }
    | returnStmt        { Stmt.Return $1 }
    | continueStmt      { Stmt.Continue }
    | breakStmt         { Stmt.Break }
    | ifStmt            { Stmt.If $1 }
    | typeGuardStmt     { Stmt.TypeGuard $1 }
    | whileStmt         { Stmt.While $1 }
    | doWhileStmt       { Stmt.DoWhile $1 }
    | forStmt           { Stmt.For $1 }
    | foreachStmt       { Stmt.Foreach $1 }
    | expStmt           { Stmt.Exp $1 }
    | yieldBreakStmt    { Stmt.YieldBreak }
    | yieldReturnStmt   { Stmt.YieldReturn $1 }

tupleElemExp
    : ID COLON exp { { name = Some $1; exp = $3 } }
    | exp { { name = None; exp = $1 } }

tupleElemExpsRev
    : tupleElemExp { [$1] }
    | tupleElemExpsRev tupleElemExp { $2::$1 }

tupleElemExps2Rev
    : tupleElemExpsRev tupleElemExp { $2::$1 }

// TODO: 이름 변경
idExp: ID optionalTypeArgs { { name = $1; typeArgs = $2 } }

argument
    : optionalOut exp { { bOut = $1; exp = $2 } }

primitiveExp
    : NULLTOKEN { Exp.NullLiteral }
    | DIGITS    { Exp.IntLiteral { value = $1 } }
    | TRUE      { Exp.BoolLiteral { value = true } }
    | FALSE     { Exp.BoolLiteral { value = false } }
    | STRING    { Exp.StringLiteral { value = $1 } }
    | expList   { Exp.ListConstructor { elems = $1 } }
    | LPAREN tupleElemExps2Rev RPAREN { Exp.TupleConstructor { elems = List.rev($2) } }
    | LPAREN RPAREN { Exp.TupleConstructor { elems = [] } }
    | idExp                    { Exp.ID $1 }
    | LPAREN exp RPAREN        { $2 } 
    | NEW typeID funcArguments { Exp.New { objectType = $2; args = $3} }

argumentsRev
    : argument { [$1] }
    | argumentsRev COMMA argument { $3::$1 }

funcArguments
    : LPAREN RPAREN { { args = []; paramsExp = None } }
    | LPAREN argumentsRev RPAREN { { args = List.rev($2); paramsExp = None } }
    | LPAREN argumentsRev COMMA PARAMS exp RPAREN { { args = List.rev($2); paramsExp = Some $5 } }
    | LPAREN PARAMS exp RPAREN { { args = []; paramsExp = Some $3 } }

expsRev
    : exp { [$1] }
    | expsRev COMMA exp { $3::$1 }

expList
    : LBRACKET RBRACKET { [] }
    | LBRACKET expsRev RBRACKET { List.rev($2) }

// 1.x, false.toString(), a().e, a.x, (2 + 3).e, new p().x, x.x.x, x = y.p, 2 + 3.e
// 1(x), v(p), a.p(e) => (a.p)(e) a * e(2) e()()
elementExp
    : primitiveExp { $1 }
    | elementExp expList { Exp.Indexer { operands = $2 } }
    | elementExp DOT idExp     { Exp.Member { exp = $1; id = $3 } }
    | elementExp funcArguments { Exp.Call { funcExp = $1; args = $2 } }

unaryExp
    : elementExp { $1 }
    | elementExp PLUSPLUS    { Exp.UnaryOperator { kind = UnaryOperatorKind.PlusPlus;   operand = $1 } }
    | elementExp MINUSMINUS  { Exp.UnaryOperator { kind = UnaryOperatorKind.MinusMinus; operand = $1 } }
    | AWAIT exp { Exp.Await { exp = $2 } }
    | EXCL elementExp { Exp.UnaryOperator { kind = UnaryOperatorKind.Excl; operand = $2 } }

multiplicativeExp
    : unaryExp { $1 }
    | multiplicativeExp STAR multiplicativeExp  { Exp.BinaryOperator { kind = BinaryOperatorKind.Star;  leftOperand = $1; rightOperand = $3 } }
    | multiplicativeExp SLASH multiplicativeExp { Exp.BinaryOperator { kind = BinaryOperatorKind.Slash; leftOperand = $1; rightOperand = $3 } }

additiveExp
    : multiplicativeExp { $1 }
    | additiveExp PLUS additiveExp  { Exp.BinaryOperator { kind = BinaryOperatorKind.Plus;  leftOperand = $1; rightOperand = $3 } }
    | additiveExp MINUS additiveExp { Exp.BinaryOperator { kind = BinaryOperatorKind.Minus; leftOperand = $1; rightOperand = $3 } }

compareExp
    : additiveExp { $1 }
    | compareExp EQUALEQUAL compareExp { Exp.BinaryOperator { kind = BinaryOperatorKind.EqualEqual;   leftOperand = $1; rightOperand = $3 } }
    | compareExp EXCLEQUAL compareExp  { Exp.BinaryOperator { kind = BinaryOperatorKind.ExclEqual;    leftOperand = $1; rightOperand = $3 } }
    | compareExp LT compareExp         { Exp.BinaryOperator { kind = BinaryOperatorKind.Less;         leftOperand = $1; rightOperand = $3 } }
    | compareExp GT compareExp         { Exp.BinaryOperator { kind = BinaryOperatorKind.Greater;      leftOperand = $1; rightOperand = $3 } }
    | compareExp LTEQUAL compareExp    { Exp.BinaryOperator { kind = BinaryOperatorKind.LessEqual;    leftOperand = $1; rightOperand = $3 } }
    | compareExp GTEQUAL compareExp    { Exp.BinaryOperator { kind = BinaryOperatorKind.GreaterEqual; leftOperand = $1; rightOperand = $3 } }

logicalAndExp
    : compareExp { $1 }
    | logicalAndExp AMPERAMPER logicalAndExp { Exp.ShortcutOperator { kind = ShortcutOperatorKind.LogicalAnd; leftOperand = $1; rightOperand = $3 } }

logicalOrExp
    : logicalAndExp { $1 }
    | logicalOrExp BARBAR logicalOrExp { Exp.ShortcutOperator { kind = ShortcutOperatorKind.LogicalOr; leftOperand = $1; rightOperand = $3 } }

conditionalExp
    : logicalOrExp { $1 }
    | conditionalExp QUESTION conditionalExp COLON conditionalExp %prec TERNARY { Exp.Conditional { cond = $1; trueExp = $3; falseExp = $5 } }
    | conditionalExp QUESTIONQUESTION conditionalExp { Exp.NullConditional { exp = $1; nullExp = $3 } }

assignExp
    : conditionalExp { $1 }
    | assignExp EQUALS assignExp { Exp.Assign { leftExp = $1; rightExp = $3 } }

exp: assignExp { $1 }

globalFunctionDecl
    : optionalAsync typeID ID optionalTypeParams LPAREN optionalFuncParams RPAREN optionalTypeParamConstraints LBRACE optionalStmts RBRACE
    { { bAsync = $1; retTypeID = $2; name = $3; typeParams = $4; funcParams = $6; typeParamConstraints = $8; stmts = $10 } }

// classDecl
//  : CLASS ID optionalTypeParamsAndConstraints optionalBaseTypeDecl LBRACE objectMemberDecl* RBRACE

// structDecl
//  : STRUCT ID optionalTypeParamsAndConstraints optionalBaseTypeDecl LBRACE objectMemberDecl* RBRACE

fileUnitElem
    : globalFunctionDecl { Func $1 }
//     | classDecl { Class $1 }
//     | structDecl { Struct $1 }
    | interfaceDecl { Interface $1 }
    | stmt { Stmt $1 }

fileUnitElemsRev
    : fileUnitElem { [$1] }
    | fileUnitElemsRev fileUnitElem { $2::$1 }

fileUnit: fileUnitElemsRev EOF { { FileUnit.elems = List.rev($1) } }
    | EOF { { FileUnit.elems = [] } }
